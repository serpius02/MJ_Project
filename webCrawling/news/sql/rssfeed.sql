-- 1. pgvector 확장 기능 활성화 (최초 1회만 실행)
CREATE EXTENSION IF NOT EXISTS vector;

-- 2. 뉴스 기사 데이터를 저장할 최종 테이블 생성
--    (기본 정보, AI 검색, 다국어 번역 기능 모두 포함)
-- 일반적으로 테이블을 만들 때 스키마를 지정하지 않으면 자동으로 이 public 스키마에 생성되기 때문에, 
-- news_articles와 public.news_articles는 사실상 같은 테이블을 가리킵니다.
CREATE TABLE public.news_articles (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    
    -- RSS 피드 기본 정보
    title TEXT NOT NULL,                     -- 원문 제목
    link TEXT NOT NULL UNIQUE,               -- 원문 링크 (중복 방지)
    summary TEXT,                            -- 원문 요약
    published_date TIMESTAMPTZ,              -- 발행 일시 (타임존 포함) 데이터는 항상 표준시(UTC)로 저장하고, 사용자에게 보여줄 때만 애플리케이션 단에서 원하는 시간대(KST)로 변환하여 표시
    source TEXT,                             -- RSS 피드 출처
    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL, -- DB 저장 시간

    -- AI 기능 확장을 위한 컬럼
    embedding VECTOR(1536),                  -- AI 의미 기반 검색을 위한 임베딩 벡터
    translations JSONB                       -- 다국어 번역(한/영 등)을 저장하기 위한 JSONB 컬럼
);

-- 3. 벡터 검색 성능 향상을 위한 HNSW 인덱스 생성
CREATE INDEX ON public.news_articles USING hnsw (embedding vector_cosine_ops);

-- 'translations' jsonb 컬럼에 대한 GIN 인덱스 생성
CREATE INDEX idx_news_articles_translations 
ON public.news_articles 
USING GIN (translations);

-- 4. RLS(행 수준 보안) 활성화
ALTER TABLE public.news_articles ENABLE ROW LEVEL SECURITY;

-- 5. 정책(Policy) 설정
-- Python 스크립트 등 서버 환경에서 모든 작업을 허용하는 정책
CREATE POLICY "Allow service_role full access"
ON public.news_articles FOR ALL
TO service_role
USING (true) WITH CHECK (true);

-- 웹 애플리케이션 등 외부에서 데이터를 읽을 수 있도록 허용하는 정책
CREATE POLICY "Allow public read access"
ON public.news_articles FOR SELECT
TO public
USING (true);

-- 6. AI 의미 기반 검색을 위한 데이터베이스 함수 생성
-- 사용자 검색어를 벡터로 변환한 값으로 전달 받고, 10 개의 검색 결과를 반환 (테이블 값들과 similarity 계산값)
CREATE OR REPLACE FUNCTION match_news_articles (
  query_embedding VECTOR(1536),
  match_count INT DEFAULT 10
) RETURNS TABLE (
  id BIGINT,
  title TEXT,
  link TEXT,
  summary TEXT,
  published_date TIMESTAMPTZ,
  source TEXT,
  translations JSONB,
  similarity FLOAT
)
LANGUAGE plpgsql
AS $$
BEGIN
  RETURN QUERY
  SELECT
    na.id,
    na.title,
    na.link,
    na.summary,
    na.published_date,
    na.source,
    na.translations,
    1 - (na.embedding <=> query_embedding) AS similarity
  FROM news_articles AS na
  ORDER BY na.embedding <=> query_embedding
  LIMIT match_count;
END;
$$;
